##LANGUAGE 'C#'
##TEMPLATE-NAME 'Parser symbols lookup table.'
##ENGINE-NAME 'Aggregator'
##SYSTEM-VERSION '5.0'
##AUTHOR 'ThinkingMedia' 
##FILE-EXTENSION 'cs'
##ID-CASE None
##ID-SEPARATOR '_'
using System;
using Prometheus.Nodes;
using Prometheus.Objects;

namespace Prometheus.Grammar
{
	/// <summary>
	///
	/// </summary>
	public class GrammarObject
	{
		/// <summary>
		/// An array of executable Prometheus objects where 
		/// the index matches the enum for that statement.
		/// </summary>
		private readonly PrometheusObject[] _objects;

		/// <summary>
		/// Creates an instance of a statement class using a string.
		/// </summary>
		private PrometheusObject Create(string pName)
		{
		    Type type = Type.GetType(pName);
			return (type == null) ? null : (PrometheusObject)Activator.CreateInstance(type,new object[]{this});
		}

##SYMBOL-TABLE
		/// <summary>
		/// Constructor
		/// </summary>
		public GrammarObject()
		{
			_objects = new PrometheusObject[%Count%];

##DELIMITER ','
##SYMBOLS
			_objects[%Value%] = Create(@"Prometheus.Objects.%ID%Object");
##END-SYMBOLS
##END-SYMBOL-TABLE
		}

		/// <summary>
		/// Finds the object that can be executed as an expression.
		/// </summary>
	    public PrometheusObject getObject(Node pNode)
	    {
	        return _objects[(int)pNode.Type];
	    }
	}
}
