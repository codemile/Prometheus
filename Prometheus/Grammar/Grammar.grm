! ----------------------------------------------------------------------------
! Prometheus
!
! This is the grammar rules for the Prometheus programming language.
!
! ----------------------------------------------------------------------------

"Name"     = 'Prometheus Grammar'
"Author"   = 'ThinkingMedia'
"Version"  = '1.0'
"About"    = 'Scripting language for processing documents.'
"Case Sensitive" = 'False'
"Start Symbol" = <Program>

! ===================================================================
! Character Sets
! ===================================================================

{ID Head}				= {Letter} + [_]
{ID Tail}				= {Alphanumeric} + [_]
{DoubleString Chars}	= {Printable} + {HT} - ["\]
{SingleString Chars}	= {Printable} + {HT} - [''\]
{Non Terminator}		= {DoubleString Chars} - {CR} - {LF}
{RegExp Chars}			= {Letter}+{Digit}+['^']+['$']+['*']+['+']+['?']+['{']+['}']+['|']+['-']+['.']+[',']+['#']+['[']+[']']+['_']+['<']+['>']

! ===================================================================
! Terminals
! ===================================================================

Identifier		= {ID Head}{ID Tail}*
StringDouble	= '"' ( {DoubleString Chars} | '\' {Printable} )* '"'
StringSingle	= [''] ( {SingleString Chars} | '\' {Printable} )* ['']
Number			= [0123456789,]+
Decimal			= [0123456789,]+ '.' [0123456789]+
Boolean			= true | false | on | off | yes | no | always | never
RegExp			= '/' ({RegExp Chars} | '\' {Non Terminator})+ '/' ( 'g' | 'i' | 'm' )*

! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! ===================================================================
! Math Expressions
! ===================================================================
<Expression>  ::= <GtOperator>

<GtOperator>			::= <GtOperator> '>' <LtOperator> | <LtOperator>
<LtOperator>			::= <LtOperator> '<' <GteOperator> | <GteOperator>
<GteOperator>			::= <GteOperator> '>=' <LteOperator> | <LteOperator>
<LteOperator>			::= <LteOperator> '<=' <EqualOperator> | <EqualOperator>

<EqualOperator>			::= <EqualOperator> '==' <NotEqualOperator> | <NotEqualOperator>
<NotEqualOperator>		::= <NotEqualOperator> '!=' <AndOperator> | <NotEqualOperator> '<>' <AndOperator> | <AndOperator>
<AndOperator>			::= <AndOperator> AND <OrOperator> | <AndOperator> '&&' <OrOperator> | <OrOperator>
<OrOperator>			::= <OrOperator> OR <AddExpression> | <OrOperator> '||' <AddExpression> | <AddExpression>

<AddExpression>			::= <AddExpression> '+' <SubExpression> | <SubExpression> 
<SubExpression>			::= <SubExpression> '-' <MultiplyExpression> | <MultiplyExpression> 
<MultiplyExpression>    ::= <MultiplyExpression> '*' <DivideExpression>  | <DivideExpression> 
<DivideExpression>		::= <DivideExpression> '/' <UnaryOperator>  | <UnaryOperator> 

<UnaryOperator>			::= '--' <Variable>
						 | '++' <Variable>
						 | '-' <Value>
						 | '+' <Value>
						 | '!' <Value>
						 | '~' <Value>
						 | NOT <Value>
						 | <Value>

! ===================================================================
! Variables And Primitives
! ===================================================================

<Variable>		::= Identifier
				| 'this'

<Value>			::= StringDouble
				| StringSingle
				| Number
				| Decimal
				| Boolean
				| <Variable>
				| <Function Expression>
				| '(' <Expression> ')'
				| <Call Expression>

! ===================================================================
! Statements
! ===================================================================
<Program>		::= <Statements>
				| !Nothing

<Block>			::= '{' <Statements> '}'
				|  '{' '}'

<Statement or Block>	::= <Statement>
						| <Block>

<Statements>	::= <Statement>
				| <Statements> <Statement>
				| <Block>

<Statement>		::= <FlowControl>
				| <Variables> ';'
				| <Procedure> ';'
				| <Call Expression> ';'

! ===================================================================
! Functions
! ===================================================================

<Function Declaration>	::= 'function' Identifier '(' <Formal Parameter List> ')' <Block>
						| 'function' Identifier '(' ')' <Block>

<Function Expression>	::= 'function' '(' ')' <Block>
						| 'function' '(' <Formal Parameter List> ')' <Block>

<Formal Parameter List> ::= Identifier
						| <Formal Parameter List> ',' Identifier

! ===================================================================
! Formal Expressions
! ===================================================================

<Call Expression>		::= <Variable> <Arguments>
						| <Call Expression> <Arguments>			! chaining

<Arguments>				::= '(' ')'
						| '(' <Argument List> ')'

<Argument List>			::= <Expression>
						| <Argument List> ',' <Expression>

! ===================================================================
! Flow control
! ===================================================================

<FlowControl>		::= <IfControl>
					| <DoWhileControl>
					| <DoUntilControl>
					| <LoopWhileControl>
					| <LoopUntilControl>
					| <ForControl>
					| <ForStepControl>
					| <BreakControl>
					| <ContinueControl>

<IfControl>			::= IF '(' <Expression> ')' <Statement or Block> 
					| IF '(' <Expression> ')' <Statement or Block> ELSE <Statement or Block>

<DoWhileControl>	::= WHILE '(' <Expression> ')' <Statement or Block>
<DoUntilControl>	::= UNTIL '(' <Expression> ')' <Statement or Block>
<LoopWhileControl>	::= DO <Statement or Block> WHILE '(' <Expression> ')'
<LoopUntilControl>	::= DO <Statement or Block> UNTIL '(' <Expression> ')'

<ForControl>		::= FOR Identifier '=' <Expression> TO <Expression> <Statement or Block>
<ForStepControl>	::= FOR Identifier '=' <Expression> TO <Expression> STEP <Expression> <Statement or Block>

<BreakControl>		::= BREAK
<ContinueControl>	::= CONTINUE

! ===================================================================
! Variable Commands
! ===================================================================

<Variables>			::= <Declare>
					| <Assignment>
					| <ListVars>
					| <Increment>
					| <Decrement>

<Declare>			::= VAR Identifier
					| VAR Identifier '=' <Expression>

<Assignment>		::= Identifier '=' <Expression>

<ListVars>			::= VARS

<Increment>			::= Identifier '++'
<Decrement>			::= Identifier '--'

! ===================================================================
! Procedures
! ===================================================================

<Procedure>	::= <UnsetProc>
			 | <RejectProc>
			 | <AcceptProc>
			 | <ScopeProc>
			 | <IncludeProc>
			 | <PrintProc>
			 | <ReturnProc>
			 | <UpperFunc>
			 | <LowerFunc>
			 | <TrimFunc>

<UnsetProc>			::= UNSET Identifier
<RejectProc>		::= REJECT <Expression>
<AcceptProc>		::= ACCEPT <Expression>
<ScopeProc>			::= SCOPE <Expression>
<IncludeProc>		::= INCLUDE <Expression>
<PrintProc>			::= PRINT <Expression>
<ReturnProc>		::= RETURN <Expression>

<UpperFunc>			::= UPPER '(' <Expression> ')'
<LowerFunc>			::= LOWER '(' <Expression> ')'
<TrimFunc>			::= TRIM '(' <Expression> ')'
