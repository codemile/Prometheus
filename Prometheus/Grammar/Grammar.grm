! ----------------------------------------------------------------------------
! Prometheus
!
! This is the grammar rules for the Prometheus programming language.
!
! ----------------------------------------------------------------------------

"Name"     = 'Prometheus Grammar'
"Author"   = 'ThinkingMedia'
"Version"  = '1.0'
"About"    = 'Scripting language for processing documents.'
"Case Sensitive" = 'False'
"Start Symbol" = <Program>

! ===================================================================
! Character Sets
! ===================================================================

{ID Head}				= {Letter} + [_]
{ID Tail}				= {Alphanumeric} + [_]
{DoubleString Chars}	= {Printable} + {HT} - ["\]
{SingleString Chars}	= {Printable} + {HT} - [''\]
{Non Terminator}		= {DoubleString Chars} - {CR} - {LF}
{RegExp Chars}			= {Letter}+{Digit}+['^']+['$']+['*']+['+']+['?']+['{']+['}']+['|']+['-']+['.']+[',']+['#']+['[']+[']']+['_']+['<']+['>']

! ===================================================================
! Terminals
! ===================================================================

Identifier		= {ID Head}{ID Tail}*
MemberName		=  '.' {ID Head}{ID Tail}*       

StringDouble	= '"' ( {DoubleString Chars} | '\' {Printable} )* '"'
StringSingle	= [''] ( {SingleString Chars} | '\' {Printable} )* ['']
Number			= [0123456789,]+
Decimal			= [0123456789,]+ '.' [0123456789]+
Boolean			= true | false | on | off | yes | no | always | never
RegExp			= '/' ({RegExp Chars} | '\' {Non Terminator})+ '/' ( 'g' | 'i' | 'm' )*
Type			= object | model | observer

! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! ===================================================================
! Math Expressions
! ===================================================================
<Expression>  ::= <GtOperator>

<GtOperator>			::= <GtOperator> '>' <LtOperator> | <LtOperator>
<LtOperator>			::= <LtOperator> '<' <GteOperator> | <GteOperator>
<GteOperator>			::= <GteOperator> '>=' <LteOperator> | <LteOperator>
<LteOperator>			::= <LteOperator> '<=' <EqualOperator> | <EqualOperator>

<EqualOperator>			::= <EqualOperator> '==' <NotEqualOperator> | <NotEqualOperator>
<NotEqualOperator>		::= <NotEqualOperator> '!=' <AndOperator> | <NotEqualOperator> '<>' <AndOperator> | <AndOperator>
<AndOperator>			::= <AndOperator> AND <OrOperator> | <AndOperator> '&&' <OrOperator> | <OrOperator>
<OrOperator>			::= <OrOperator> OR <AddExpression> | <OrOperator> '||' <AddExpression> | <AddExpression>

<AddExpression>			::= <AddExpression> '+' <SubExpression> | <SubExpression> 
<SubExpression>			::= <SubExpression> '-' <MultiplyExpression> | <MultiplyExpression> 
<MultiplyExpression>    ::= <MultiplyExpression> '*' <DivideExpression>  | <DivideExpression> 
<DivideExpression>		::= <DivideExpression> '/' <UnaryOperator>  | <UnaryOperator> 

<UnaryOperator>			::= '--' <Qualified ID>
						 | '++' <Qualified ID>
						 | '-' <Value>
						 | '+' <Value>
						 | '!' <Value>
						 | '~' <Value>
						 | NOT <Value>
						 | <Value>

! ===================================================================
! Variables And Primitives
! ===================================================================

<Valid ID>			::= Identifier

<Qualified ID>		::= <Valid ID> <Member List>
	 
<Member List>		::= <Member List> MemberName
					|  !Zero or more 


<Value>				::= StringDouble
					| StringSingle
					| Number
					| Decimal
					| Boolean
					| <Qualified ID>
					| <Function Expression>
					| '(' <Expression> ')'
					| <Call Expression>


<Variable Statements>	::= <Declare>
						| <Assignment>
						| <Increment>
						| <Decrement>



<Declare>			::= VAR Identifier
					| VAR Identifier '=' <Expression>
					| VAR Identifier '=' <New Expression>

<Assignment>		::= <Qualified ID> '=' <Expression>

<Increment>			::= <Qualified ID> '++'
<Decrement>			::= <Qualified ID> '--'

! ===========================================================================
! End of statement marker
! ===========================================================================

<End>				::= ';'

<End Opt>			::= <End>
					| ! Nothing

<Block or End>		::= <Block>
					|  <End>

! ===================================================================
! Statements
! ===================================================================
<Program>		::= <Object Decls>
				| <Object Decls> <Statements>
				| <Statements>
				| !Nothing

<Block>			::= '{' <Statements> '}'
				|  '{' '}'

<Statement or Block>	::= <Statement>
						| <Block>

<Statements>	::= <Statement>
				| <Statements> <Statement>
				| <Block>

<Statement>		::= <FlowControl>
				| <Variable Statements> <End>
				| <Procedure> <End>
				| <Call Expression> <End>
				| <New Expression> <End>
				| <End>

! ===================================================================
! Objects
! ===================================================================

<Object Decls>	::= <Object Decl>
				| <Object Decls> <Object Decl>

<Object Decl>	::= <Base Class> Identifier <Block> <End>
				| <Base Class> Identifier '(' ')' <Block> <End>
				| <Base Class> Identifier '(' <Formal Parameter List> ')' <Block> <End>

<Base Class>	::= Type
				| <Qualified ID>

! ===================================================================
! Functions
! ===================================================================

<Function Declaration>	::= 'function' Identifier '(' <Formal Parameter List> ')' <Block>
						| 'function' Identifier '(' ')' <Block>

<Function Expression>	::= 'function' '(' ')' <Block>
						| 'function' '(' <Formal Parameter List> ')' <Block>

<Formal Parameter List> ::= Identifier
						| <Formal Parameter List> ',' Identifier

! ===================================================================
! Formal Expressions
! ===================================================================

<Call Expression>		::= <Qualified ID> <Arguments>
						| <Call Expression> <Arguments>			! chaining

<New Expression>		::= 'new' Identifier <Arguments>

! This is not used by the grammar. The compiler uses to mark calls to internal methods.
<CallInternal>			::= ! matches nothing

<Arguments>				::= '(' ')'
						| '(' <Argument List> ')'

<Argument List>			::= <Expression>
						| <Argument List> ',' <Expression>

! ===================================================================
! Flow control
! ===================================================================

<FlowControl>		::= <IfControl>
					| <DoWhileControl>
					| <DoUntilControl>
					| <LoopWhileControl>
					| <LoopUntilControl>
					| <ForControl>
					| <ForStepControl>
					| <BreakControl>
					| <ContinueControl>

<IfControl>			::= IF '(' <Expression> ')' <Statement or Block> 
					| IF '(' <Expression> ')' <Statement or Block> ELSE <Statement or Block>

<DoWhileControl>	::= WHILE '(' <Expression> ')' <Statement or Block>
<DoUntilControl>	::= UNTIL '(' <Expression> ')' <Statement or Block>
<LoopWhileControl>	::= DO <Statement or Block> WHILE '(' <Expression> ')'
<LoopUntilControl>	::= DO <Statement or Block> UNTIL '(' <Expression> ')'

<ForControl>		::= FOR Identifier '=' <Expression> TO <Expression> <Statement or Block>
<ForStepControl>	::= FOR Identifier '=' <Expression> TO <Expression> STEP <Expression> <Statement or Block>

<BreakControl>		::= BREAK
<ContinueControl>	::= CONTINUE

! ===================================================================
! Procedures
! ===================================================================

<Procedure>			::= <UnsetProc>
					| <RejectProc>
					| <AcceptProc>
					| <ScopeProc>
					| <IncludeProc>
					| <PrintProc>
					| <ReturnProc>
					| <ListVars>
					| <ListObjects>

<UnsetProc>			::= UNSET <Qualified ID>
<RejectProc>		::= REJECT <Expression>
<AcceptProc>		::= ACCEPT <Expression>
<ScopeProc>			::= SCOPE <Expression>
<IncludeProc>		::= INCLUDE <Expression>
<PrintProc>			::= PRINT <Expression>
<ReturnProc>		::= RETURN <Expression>
<ListVars>			::= VARS
<ListObjects>		::= OBJECTS