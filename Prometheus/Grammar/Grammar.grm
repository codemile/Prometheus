! ----------------------------------------------------------------------------
! Prometheus
!
! This is the grammar rules for the Prometheus programming language.
!
! ----------------------------------------------------------------------------

"Name"				= 'Prometheus Grammar'
"Author"			= 'ThinkingMedia'
"Version"			= '1.0'
"About"				= 'Scripting language for processing documents.'
"Case Sensitive"	= 'False'
"Start Symbol"		= <Program>

! ===================================================================
! Character Sets
! ===================================================================

{ID Head}				= {Letter} + [_]
{ID Tail}				= {Alphanumeric} + [_]
{DoubleString Chars}	= {Printable} + {HT} - ["\]
{SingleString Chars}	= {Printable} + {HT} - [''\]
{Non Terminator}		= {DoubleString Chars} - {CR} - {LF}
{RegExp Chars}			= {Letter}+{Digit}+['^']+['$']+['*']+['+']+['?']+['{']+['}']+['|']+['-']+['.']+[',']+['#']+['[']+[']']+['_']+['<']+['>']

! ===================================================================
! Terminals
! ===================================================================

Identifier		= {ID Head}{ID Tail}*
MemberName		=  '.' {ID Head}{ID Tail}*

StringDouble	= '"' ( {DoubleString Chars} | '\' {Printable} )* '"' [icf]*
StringSingle	= [''] ( {SingleString Chars} | '\' {Printable} )* [''] [icf]*
RegExpSlash		= '/' ({RegExp Chars} | '\' {Non Terminator})+ '/' [icf]*
RegExpPipe		= '|' ({RegExp Chars} | '\' {Non Terminator})+ '|' [icf]*

Number			= [0123456789]+
Decimal			= [0123456789]+ '.' [0123456789]+
Boolean			= 'true' | 'false' | 'on' | 'off' | 'yes' | 'no' | 'always' | 'never'
Undefined		= 'undefined'

! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! ===================================================================
! Program Structure
! ===================================================================
<Program>		::= <Program Test>
				| <Program Code>

<Program Test>	::= <Test Suite Decl> <Import Decls> <Test Decls> <Test Execute>
				| <Test Suite Decl> <Import Decls> <Statements> <Test Decls> <Test Execute>
				| <Test Suite Decl> <Import Decls> <Statements> <Test Decls> <Test Execute> <Statements>

<Program Code>	::= <Import Decls> <Object Decls> 
				| <Import Decls> <Object Decls> <Statements>

<Block>			::= '{' <Statements> '}'
				|  '{' '}'

<Statement or Block>	::= <Statement>
						| <Block>

<Statements>	::= <Statement or Block>
				| <Statements> <Statement or Block>

<Statement>		::=  <Flow Control> <End>
				| <Function Decl> <End>
				| <All Procedures> <End>
				| <All Functions> <End>
				| <Variable Statements> <End>
				| <Call Expression> <End>
				| <New Expression> <End>
				| <End>

! ===================================================================
! Unit Tests
! ===================================================================

<Test Suite Decl>	::= 'tests' <End>
					| 'tests' '[' <Test Suite Array> ']' <End>

<Test Suite Array>	::= <Valid ID>
					| <Valid ID> ',' <Test Suite Array>
					| ! or none

<Test Decls>		::= <Test Decl>
					| <Test Decls> <Test Decl>
					| ! or none

<Test Decl>			::= 'test' <Valid ID> <Block> <End>
<Test Block>		::= ! place holder used by optimizer to create functions.
<Test Execute>		::= ! a marker of when to execute the unit test

! ===========================================================================
! End of statement marker
! ===========================================================================

<End>				::= ';'

<End Opt>			::= <End>
					| ! Nothing

<Block or End>		::= <Block>
					|  <End>


! ===================================================================
! Expressions
! ===================================================================
<Expression>  ::= <Search Chain>

! ===================================================================
! Search Operators
! ===================================================================

<Search Chain>			::= <Contains Term>

<Contains Term>			::= <Contains Term> 'CONTAINS' <Boolean Chain>
						| <Contains Term> 'HAS' <Boolean Chain> | <Boolean Chain>

! ===================================================================
! Boolean Operators
! ===================================================================

<Boolean Chain>			::= <Gt Operator>

<Gt Operator>			::= <Gt Operator> '>' <Lt Operator> | <Lt Operator>
<Lt Operator>			::= <Lt Operator> '<' <Gte Operator> | <Gte Operator>
<Gte Operator>			::= <Gte Operator> '>=' <Lte Operator> | <Lte Operator>
<Lte Operator>			::= <Lte Operator> '<=' <Equal Operator> | <Equal Operator>

<Equal Operator>			::= <Equal Operator> '==' <Not Equal Operator> | <Not Equal Operator>
<Not Equal Operator>		::= <Not Equal Operator> '!=' <And Operator> 
						| <Not Equal Operator> '<>' <And Operator> | <And Operator>
<And Operator>			::= <And Operator> 'AND' <Or Operator> 
						| <And Operator> '&&' <Or Operator> | <Or Operator>
<Or Operator>			::= <Or Operator> 'OR' <Math Chain> 
						| <Or Operator> '||' <Math Chain> | <Math Chain>

! ===================================================================
! Math Operators
! ===================================================================

<Math Chain>				::= <Add Expression>

<Add Expression>			::= <Add Expression> '+' <Sub Expression> | <Sub Expression> 
<Sub Expression>			::= <Sub Expression> '-' <Multiply Expression> | <Multiply Expression> 
<Multiply Expression>    ::= <Multiply Expression> '*' <Divide Expression>  | <Divide Expression> 
<Divide Expression>		::= <Divide Expression> '/' <Remainder Expression>  | <Remainder Expression>
<Remainder Expression>	::= <Remainder Expression> '%' <Unary Chain>  | <Unary Chain>


! ===================================================================
! Unary Operators
! ===================================================================

<Unary Chain>			::= <Not Operator>

<Not Operator>			::= '!' <Value>
						| 'NOT' <Value>
						| <Bit Invert Operator>

<Bit Invert Operator>		::= '~' <Value>
						| <Neg Operator>

<Neg Operator>			::= '-' <Value>
						| <Plus Operator>

<Plus Operator>			::= '+' <Value>
						| <Pre Dec Operator>

<Pre Dec Operator>		::= '--' <Qualified ID>
						| <Post Dec Operator>

<Post Dec Operator>		::= <Qualified ID> '--'
						| <Pre Inc Operator>

<Pre Inc Operator>		::= '++' <Qualified ID>
						| <Post Inc Operator>

<Post Inc Operator>		::= <Qualified ID> '++'
						| <Each Operator>

<Each Operator>			::= <Each Control>
						| <Value>

! ===================================================================
! Variables And Primitives
! ===================================================================

<Valid ID>			::= Identifier
<Member ID>			::= MemberName

<ClassName ID>		::= <Valid ID> <ClassName List>

<ClassName List>	::= <Member ID> <ClassName List>
					| ! zero or more

<NameSpace>			::= ! used by the builder to package multiple files.

! ===================================================================
! References to a variable, object member or array index
! ===================================================================
<Qualified ID>		::= <Valid ID> <Qualified List>

<Qualified List>	::= <Member ID> <Qualified List>
					| '[' <Value> ']' <Qualified List>
					| ! zero or more

! ===================================================================
! A value is the result of an expression.
! ===================================================================
<Value>				::= StringDouble
					| StringSingle
					| RegExpSlash
					| RegExpPipe
					| Number
					| Decimal
					| Boolean
					| Undefined
					| <Array Literal>
					| <Qualified ID>
					| <Function Expression>
					| '(' <Expression> ')'
					| <Call Expression>
					| <All Functions>

<Variable Statements>	::= <Declare>
						| <Assignment>
						| <Post Increment>
						| <Pre Increment>
						| <Post Decrement>
						| <Pre Decrement>

<Array Literal>			::= '[' ']'
						| '[' <Array Literal List> ']'

<Array Literal List>	::= <Value>
						| <Array Literal List> ',' <Value>

<Declare>			::= VAR Identifier
					| VAR Identifier '=' <Expression>
					| VAR Identifier '=' <New Expression>

<Assignment>		::= <Qualified ID> '=' <Expression>

<Post Increment>		::= <Qualified ID> '++'
<Pre Increment>			::= '++' <Qualified ID>
<Post Decrement>		::= <Qualified ID> '--'
<Pre Decrement>			::= '--' <Qualified ID>

! ===================================================================
! Packages
! ===================================================================

<Import Decls>		::= <Import Decl>
					| <Import Decls> <Import Decl>
					| ! or none

<Import Decl>		::= 'use' StringDouble <End>

! ===================================================================
! Objects
! ===================================================================

<Object Decls>			::= <Object Decl>
						| <Object Decls> <Object Decl>
						| ! or none

<Object Decl>			::= 'object' <BaseClass ID> <Parameter Array> <Block> <End>
<Object Block>			::= ! place holder used by optimizer to create constructor function.

<BaseClass ID>			::= <ClassName ID> '::' <Valid ID>
						| <Valid ID>

! ===================================================================
! Functions
! ===================================================================

<Function Decl>				::= 'function' Identifier <Parameter Array> <Block>
<Function Block>			::= ! place holder used by optimizer to create functions.

<Function Expression>		::= 'function' <Parameter Array> <Block>

<Parameter Array>			::= '(' ')'
							| '(' <Parameter List> ')'
							| ! optional

<Parameter List>			::= <Parameter Name>
							| <Parameter List> ',' <Parameter Name>

<Parameter Name>			::= Identifier

! ===================================================================
! Formal Expressions
! ===================================================================

<Call Expression>		::= <Qualified ID> <Argument Array>
						| <Call Expression> <Argument Array>	! chaining

<New Expression>		::= 'new' <ClassName ID> <Argument Array>

<Argument Array>		::= '(' ')'
						| '(' <Argument List> ')'

<Argument List>			::= <Expression>
						| <Argument List> ',' <Expression>

! ===================================================================
! Flow control
! ===================================================================

<Flow Control>		::= <If Control>
					| <Do While Control>
					| <Do Until Control>
					| <Loop While Control>
					| <Loop Until Control>
					| <For Control>
					| <Each Control>
					| <Break Control>
					| <Continue Control>

<If Control>			::= 'if' '(' <Expression> ')' <Block> 
						| 'if' '(' <Expression> ')' <Block> 'else' <Block>

<Do While Control>		::= 'while' '(' <Expression> ')' <Block>
<Do Until Control>		::= 'until' '(' <Expression> ')' <Block>
<Loop While Control>	::= 'do' <Block> 'while' '(' <Expression> ')'
<Loop Until Control>	::= 'do' <Block> 'until' '(' <Expression> ')'

<For Control>			::= 'for' '(' <For Declare> <For Expression> <For Step> ')' <Block>
<For Declare>			::= <Variable Statements> <End>
						| <End> ! optional
<For Expression>		::= <Expression> <End>
						| <End> ! optional
<For Step>				::= <Variable Statements>
						| ! optional

<Each Control>			::= 'each' <Plural ID> <Block>

<Plural ID>				::= <Expression>
						| <Expression> 'as' Identifier

<Break Control>			::= 'break'
<Continue Control>		::= 'continue'

! ===================================================================
! Procedures
! ===================================================================

<All Procedures>	::= <Unset Proc>
					| <Print Proc>
					| <Return Proc>
					| <Assert Proc>
					| <Fail Proc>
					| <List Vars>

<Unset Proc>			::= 'unset' <Qualified ID>
<Print Proc>			::= 'print' <Expression>

<Return Proc>		::= 'return' <Expression>
					| 'return'

<Assert Proc>		::= 'assert' <Expression>
<Fail Proc>			::= 'fail' <Expression>
					| 'fail'

<List Vars>			::= 'vars'

! ===================================================================
! Functions (can be used in expressions)
! ===================================================================

<All Functions>			::= <Variable Functions>

! VARIABLES
<Variable Functions>	::= <Isset Func>
						| <TypeOf Func>
<Isset Func>			::= 'isset' <Qualified ID>
<TypeOf Func>			::= 'typeof' <Expression>