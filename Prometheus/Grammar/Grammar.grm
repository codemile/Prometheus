! ----------------------------------------------------------------------------
! Prometheus
!
! This is the grammar rules for the Prometheus programming language.
!
! ----------------------------------------------------------------------------

"Name"				= 'Prometheus Grammar'
"Author"			= 'ThinkingMedia'
"Version"			= '1.0'
"About"				= 'Scripting language for processing documents.'
"Case Sensitive"	= 'False'
"Start Symbol"		= <Program>

! ===================================================================
! Character Sets
! ===================================================================

{ID Head}				= {Letter} + [_]
{ID Tail}				= {Alphanumeric} + [_]
{DoubleString Chars}	= {Printable} + {HT} - ["\]
{SingleString Chars}	= {Printable} + {HT} - [''\]
{Non Terminator}		= {DoubleString Chars} - {CR} - {LF}
{RegExp Chars}			= {Letter}+{Digit}+['^']+['$']+['*']+['+']+['?']+['{']+['}']+['|']+['-']+['.']+[',']+['#']+['[']+[']']+['_']+['<']+['>']

! ===================================================================
! Terminals
! ===================================================================

Identifier		= {ID Head}{ID Tail}*
MemberName		=  '.' {ID Head}{ID Tail}*

StringDouble	= '"' ( {DoubleString Chars} | '\' {Printable} )* '"' [icf]*
StringSingle	= [''] ( {SingleString Chars} | '\' {Printable} )* [''] [icf]*
RegExpSlash		= '/' ({RegExp Chars} | '\' {Non Terminator})+ '/' [icf]*
RegExpPipe		= '|' ({RegExp Chars} | '\' {Non Terminator})+ '|' [icf]*

Number			= [0123456789]+
Decimal			= [0123456789]+ '.' [0123456789]+
Boolean			= 'true' | 'false' | 'on' | 'off' | 'yes' | 'no' | 'always' | 'never'
Undefined		= 'undefined'

! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! ===================================================================
! Program Structure
! ===================================================================
<Program>		::= <Program Test>
				| <Program Code>

<Program Test>	::= <TestSuite Decl> <Import Decls> <Test Decls> <Test Execute>
				| <TestSuite Decl> <Import Decls> <Statements> <Test Decls> <Test Execute>
				| <TestSuite Decl> <Import Decls> <Statements> <Test Decls> <Test Execute> <Statements>

<Program Code>	::= <Import Decls> <Object Decls> 
				| <Import Decls> <Object Decls> <Statements>

<Block>			::= '{' <Statements> '}'
				|  '{' '}'

<Statement or Block>	::= <Statement>
						| <Block>

<Statements>	::= <Statement or Block>
				| <Statements> <Statement or Block>

<Statement>		::=  <FlowControl> <End>
				| <Variable Statements> <End>
				| <Function Decl> <End>
				| <Procedure> <End>
				| <Call Expression> <End>
				| <New Expression> <End>
				| <End>

! ===================================================================
! Unit Tests
! ===================================================================

<TestSuite Decl>	::= 'tests' <End>
					| 'tests' '[' <TestSuite Array> ']' <End>

<TestSuite Array>	::= <Valid ID>
					| <Valid ID> ',' <TestSuite Array>
					| ! or none

<Test Decls>		::= <Test Decl>
					| <Test Decls> <Test Decl>
					| ! or none

<Test Decl>			::= 'test' <Valid ID> <Block> <End>
<Test Block>		::= ! place holder used by optimizer to create functions.
<Test Execute>		::= ! a marker of when to execute the unit test

! ===========================================================================
! End of statement marker
! ===========================================================================

<End>				::= ';'

<End Opt>			::= <End>
					| ! Nothing

<Block or End>		::= <Block>
					|  <End>


! ===================================================================
! Expressions
! ===================================================================
<Expression>  ::= <SearchChain>

! ===================================================================
! Search Operators
! ===================================================================

<SearchChain>			::= <ContainsTerm>

<ContainsTerm>			::= <ContainsTerm> 'CONTAINS' <BooleanChain>
						| <ContainsTerm> 'HAS' <BooleanChain> | <BooleanChain>

! ===================================================================
! Boolean Operators
! ===================================================================

<BooleanChain>			::= <GtOperator>

<GtOperator>			::= <GtOperator> '>' <LtOperator> | <LtOperator>
<LtOperator>			::= <LtOperator> '<' <GteOperator> | <GteOperator>
<GteOperator>			::= <GteOperator> '>=' <LteOperator> | <LteOperator>
<LteOperator>			::= <LteOperator> '<=' <EqualOperator> | <EqualOperator>

<EqualOperator>			::= <EqualOperator> '==' <NotEqualOperator> | <NotEqualOperator>
<NotEqualOperator>		::= <NotEqualOperator> '!=' <AndOperator> 
						| <NotEqualOperator> '<>' <AndOperator> | <AndOperator>
<AndOperator>			::= <AndOperator> 'AND' <OrOperator> 
						| <AndOperator> '&&' <OrOperator> | <OrOperator>
<OrOperator>			::= <OrOperator> 'OR' <MathChain> 
						| <OrOperator> '||' <MathChain> | <MathChain>

! ===================================================================
! Math Operators
! ===================================================================

<MathChain>				::= <AddExpression>

<AddExpression>			::= <AddExpression> '+' <SubExpression> | <SubExpression> 
<SubExpression>			::= <SubExpression> '-' <MultiplyExpression> | <MultiplyExpression> 
<MultiplyExpression>    ::= <MultiplyExpression> '*' <DivideExpression>  | <DivideExpression> 
<DivideExpression>		::= <DivideExpression> '/' <RemainderExpression>  | <RemainderExpression>
<RemainderExpression>	::= <RemainderExpression> '%' <UnaryChain>  | <UnaryChain>


! ===================================================================
! Unary Operators
! ===================================================================

<UnaryChain>			::= <NotOperator>

<NotOperator>			::= '!' <Value>
						| 'NOT' <Value>
						| <BitInvertOperator>

<BitInvertOperator>		::= '~' <Value>
						| <NegOperator>

<NegOperator>			::= '-' <Value>
						| <PlusOperator>

<PlusOperator>			::= '+' <Value>
						| <PreDecOperator>

<PreDecOperator>		::= '--' <Qualified ID>
						| <PostDecOperator>

<PostDecOperator>		::= <Qualified ID> '--'
						| <PreIncOperator>

<PreIncOperator>		::= '++' <Qualified ID>
						| <PostIncOperator>

<PostIncOperator>		::= <Qualified ID> '++'
						| <Value>

! ===================================================================
! Variables And Primitives
! ===================================================================

<Valid ID>			::= Identifier
<Member ID>			::= MemberName

<ClassName ID>		::= <Valid ID> <ClassName List>

<ClassName List>	::= <Member ID> <ClassName List>
					| ! zero or more

<NameSpace>			::= ! used by the builder to package multiple files.

! ===================================================================
! References to a variable, object member or array index
! ===================================================================
<Qualified ID>		::= <Valid ID> <Qualified List>

<Qualified List>	::= <Member ID> <Qualified List>
					| '[' <Value> ']' <Qualified List>
					| ! zero or more

! ===================================================================
! A value is the result of an expression.
! ===================================================================
<Value>				::= StringDouble
					| StringSingle
					| RegExpSlash
					| RegExpPipe
					| Number
					| Decimal
					| Boolean
					| Undefined
					| <Array Literal>
					| <Qualified ID>
					| <Function Expression>
					| '(' <Expression> ')'
					| <Call Expression>

<Variable Statements>	::= <Declare>
						| <Assignment>
						| <Increment>
						| <Decrement>

<Array Literal>			::= '[' ']'
						| '[' <Array Literal List> ']'

<Array Literal List>	::= <Value>
						| <Array Literal List> ',' <Value>

<Declare>			::= VAR Identifier
					| VAR Identifier '=' <Expression>
					| VAR Identifier '=' <New Expression>

<Assignment>		::= <Qualified ID> '=' <Expression>

<Increment>			::= <Qualified ID> '++'
<Decrement>			::= <Qualified ID> '--'

! ===================================================================
! Packages
! ===================================================================

<Import Decls>		::= <Import Decl>
					| <Import Decls> <Import Decl>
					| ! or none

<Import Decl>		::= 'use' StringDouble <End>

! ===================================================================
! Objects
! ===================================================================

<Object Decls>			::= <Object Decl>
						| <Object Decls> <Object Decl>
						| ! or none

<Object Decl>			::= 'object' <BaseClass ID> <Parameter Array> <Block> <End>
<Object Block>			::= ! place holder used by optimizer to create constructor function.

<BaseClass ID>			::= <ClassName ID> '::' <Valid ID>
						| <Valid ID>

! ===================================================================
! Functions
! ===================================================================

<Function Decl>				::= 'function' Identifier <Parameter Array> <Block>
<Function Block>			::= ! place holder used by optimizer to create functions.

<Function Expression>		::= 'function' <Parameter Array> <Block>

<Parameter Array>			::= '(' ')'
							| '(' <Parameter List> ')'
							| ! none

<Parameter List>			::= <Parameter Name>
							| <Parameter List> ',' <Parameter Name>

<Parameter Name>			::= Identifier

! ===================================================================
! Formal Expressions
! ===================================================================

<Call Expression>		::= <Qualified ID> <Argument Array>
						| <Call Expression> <Argument Array>	! chaining

<New Expression>		::= 'new' <ClassName ID> <Argument Array>

<Argument Array>		::= '(' ')'
						| '(' <Argument List> ')'

<Argument List>			::= <Expression>
						| <Argument List> ',' <Expression>

! ===================================================================
! Flow control
! ===================================================================

<FlowControl>		::= <IfControl>
					| <DoWhileControl>
					| <DoUntilControl>
					| <LoopWhileControl>
					| <LoopUntilControl>
					| <ForControl>
					| <ForStepControl>
					| <BreakControl>
					| <ContinueControl>

<IfControl>			::= IF '(' <Expression> ')' <Statement or Block> 
					| IF '(' <Expression> ')' <Statement or Block> ELSE <Statement or Block>

<DoWhileControl>	::= WHILE '(' <Expression> ')' <Statement or Block>
<DoUntilControl>	::= UNTIL '(' <Expression> ')' <Statement or Block>
<LoopWhileControl>	::= DO <Statement or Block> WHILE '(' <Expression> ')'
<LoopUntilControl>	::= DO <Statement or Block> UNTIL '(' <Expression> ')'

<ForControl>		::= FOR Identifier '=' <Expression> TO <Expression> <Statement or Block>
<ForStepControl>	::= FOR Identifier '=' <Expression> TO <Expression> STEP <Expression> <Statement or Block>

<BreakControl>		::= BREAK
<ContinueControl>	::= CONTINUE

! ===================================================================
! Procedures
! ===================================================================

<Procedure>			::= <UnsetProc>
					| <ReturnProc>
					| <ListVars>
					| <Generic0Args>
					| <Generic1Args>
					| <GenericNArgs>

<UnsetProc>			::= UNSET <Qualified ID>
<ReturnProc>		::= RETURN <Expression>
<ListVars>			::= VARS

<Generic0Args>		::= Identifier
<Generic1Args>		::= Identifier <Expression>
<GenericNArgs>		::= Identifier <Argument Array>
