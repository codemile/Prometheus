Package GrammarTests.FlowControl;

Tests;

Test While_Test {
	var x = 0;
	While (x < 10) {
		x = x +1;
	};
	Assert x == 10;
}

Test While_Break_Test {
	var x = 0;
	While (x < 10) {
		x = x +1;
		Break;
	};
	Assert x == 1;
}

Test While_Continue_Test {
	var x = 0;
	var y = 0;
	While (x < 10) {
		x = x +1;
		Continue;
		y = 99;
	};
	Assert y == 0;
}

Test Until_Test {
	var x = 0;
	Until (x == 10) {
		x = x +1;
	};
	Assert x == 10;
}

Test Until_Break_Test {
	var x = 0;
	Until (x == 10) {
		x = x +1;
		Break;
	};
	Assert x == 1;
}

Test Until_Continue_Test {
	var x = 0;
	var y = 0;
	Until (x == 10) {
		x = x +1;
		Continue;
		y = 99;
	};
	Assert y == 0;
}

Test Do_While_Test {
	var x = 0;
	Do {
		x = x + 1;
	} While (x < 10);
	Assert x == 10;
}

Test Do_While_Break_Test {
	var x = 0;
	Do {
		x = x + 1;
		Break;
	} While (x < 10);
	Assert x == 1;
}

Test Do_While_Continue_Test {
	var x = 0;
	var y = 0;
	Do {
		x = x + 1;
		Continue;
		y = 99;
	} While (x < 10);
	Assert x == 10;
	Assert y == 0;
}

Test Do_Until_Test {
	var x = 0;
	Do {
		x = x + 1;
	} Until (x == 10);
	Assert x == 10;
}

Test Do_Until_Break_Test {
	var x = 0;
	Do {
		x = x + 1;
		Break;
	} Until (x == 10);
	Assert x == 1;
}

Test Do_Until_Continue_Test {
	var x = 0;
	var y = 0;
	Do {
		x = x + 1;
		Continue;
		y = 99;
	} Until (x == 10);
	Assert x == 10;
	Assert y == 0;
}

Test For_Test {
	var x = 0;
	For(var y=0; y < 10; y++)
	{
		x = x + 1;
	};
	Assert x == 10;
}

Test For_NoVar_Test {
	var x = 0;
	var y = 5;
	For(; y < 10; y++)
	{
		x = x + 1;
	};
	Assert x == 5;
}

Test For_NoStep_Test {
	var x = 0;
	For(var y=0; y < 10;)
	{
		x = x + 1;
		y++;
	};
	Assert x == 10;
}

Test For_NoVar_NoStep_Test {
	var x = 0;
	var y = 5;
	For(;y < 10;)
	{
		x = x + 1;
		y++;
	};
	Assert x == 5;
}

Test For_Break_Test {
	var x = 0;
	For(var y=0; y < 10; y++)
	{
		x = x + 1;
		break;
	};
	Assert not isset y;
	Assert x == 1;
}

Test For_Continue_Test {
	var x = 0;
	For(var y=0; y < 10; y++)
	{
		continue;
		x = x + 1;
	};
	Assert not isset y;
	Assert x == 0;
}